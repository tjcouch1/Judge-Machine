<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>category[0] = "Gameplay";
category[1] = "Replayability";
category[2] = "Graphics";
category[3] = "Sound";
category[4] = "Originality";
category[5] = "Completeness";
categorymax[0] = 10;
categorymax[1] = 10;
categorymax[2] = 10;
categorymax[3] = 10;
categorymax[4] = 10;
categorymax[5] = 10;
selected = 6;
for (a = 0; a &lt; 6; a += 1;)
    categorycurrent[a] = categorymax[a];
gamecurrent = 1;
gamemax = 0;
gamemaxtemp = "";
judgename = "";
judgenametemp = "";
average = 0;
comment_string_track();
judgenumber = 0;
judgenumbertemp = "";
var gameaverage;
judges = 0;
done = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (done == false)
{
    if (gamemax == 0)
    {
        if (keyboard_check_pressed(vk_enter))
        {
            gamemax = real(gamemaxtemp);
            for (a = 0; a &lt; gamemax; a += 1)
                gameaverage[a + 1] = 0;
            keyboard_string = "";
            keyboard_clear(vk_enter);
        }
        gamemaxtemp = string_digits(keyboard_string);
    }
    else if (judgenumber == 0)
    {
        if (keyboard_check_pressed(vk_enter))
        {
            judgenumber = real(judgenumbertemp);
            keyboard_string = "";
            keyboard_clear(vk_enter);
        }
        judgenumbertemp = string_digits(keyboard_string);
    }
    else if (judgename == "")
    {
        if (keyboard_check_pressed(vk_enter))
        {
            judgename = judgenametemp;
            judges += 1;
            keyboard_string = "";
            keyboard_clear(vk_enter);
        }
        judgenametemp = keyboard_string;
    }
    else
    {
        if (mouse_check_button_pressed(mb_left) &amp;&amp; selected &gt;= 6)
        {
            for (a = 0; a &lt; 6; a += 1;)
            {
                if (mouse_x &gt; room_width / 2 + 7 &amp;&amp; mouse_x &lt; room_width / 2 + 30 &amp;&amp; mouse_y &gt; 24 * a + 47 &amp;&amp; mouse_y &lt; 24 * a + 67)
                    {
                        selected = a;
                        keyboard_string = "";
                    }
            }
            if (mouse_x &gt; room_width / 2 - 25 &amp;&amp; mouse_x &lt; room_width / 2 + 25 &amp;&amp; mouse_y &gt; room_height * 19 / 20 - 8 &amp;&amp; mouse_y &lt; room_height * 19 / 20 + 7)
            {
                save_judge_stuff();
                selected = 6;
                gameaverage[gamecurrent] += average;
                user_input = "";
                keyboard_string = "";
                for (a = 0; a &lt; 6; a += 1;)
                    categorycurrent[a] = categorymax[a];
                if (gamecurrent &lt; gamemax)
                    gamecurrent += 1;
                else
                {
                    if (judges &lt; judgenumber)
                        judgename = "";
                    else done = true;
                    gamecurrent = 1;
                }
            }
        }
        if (keyboard_check_pressed(vk_enter) &amp;&amp; selected &lt; 6)
        {
            if (categorycurrent[selected] &gt; categorymax[selected])
                categorycurrent[selected] = categorymax[selected];
            else if (categorycurrent[selected] &lt; 1)
                categorycurrent[selected] = 1;
            selected = 6;
            keyboard_string = "";
        }
        if (selected &lt; 6)
        {
            categorycurrent[selected] = real(string_digits(keyboard_string));
            if (string_length(string(categorycurrent[selected])) &gt; 2)
            {
                categorycurrent[selected] = real(string_copy(string(categorycurrent[selected]), 1, 2));
                keyboard_string = string(categorycurrent[selected]);
            }
        }
        else comment_string_track();
        average = 0;
        for (a = 0; a &lt; 6; a += 1;)
        {
            if (a == 3 || a == 4)
                averagenum[a] = categorycurrent[a] * .1;
            else averagenum[a] = categorycurrent[a] * .2;
            average += averagenum[a];
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (done == false)
{
    if (gamemax == 0)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_ext(room_width / 2, room_height / 2, "Please enter the number of video games being judged today." + "#" + gamemaxtemp, 16, room_width / 2);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
    else if (judgenumber == 0)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_ext(room_width / 2, room_height / 2, "Please enter the number of judges today." + "#" + judgenumbertemp, 16, room_width / 2);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
    else if (judgename == "")
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_ext(room_width / 2, room_height / 2, "Please enter your name, judge." + "#" + judgenametemp, 16, room_width / 2);
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
    }
    else
    {
        draw_set_halign(fa_center);
        draw_text(room_width / 2, 16, "Judge: " + judgename + ". " + "Game Number: " + string(gamecurrent) + ".");
        draw_set_halign(fa_left);
        for (a = 0; a &lt; 6; a += 1;)
        {
            draw_set_color(c_black);
            draw_set_halign(fa_right);
            draw_text(room_width / 2, 24 * a + 48, category[a]);
            draw_set_halign(fa_left);
            draw_text(room_width / 2 + 8, 24 * a + 48, categorycurrent[a]);
            if (selected = a)
                draw_set_color(c_red);
            else draw_set_color(c_black);
            draw_rectangle(room_width / 2 + 7, 24 * a + 47, room_width / 2 + 30, 24 * a + 67, true);
        }
        draw_set_color(c_black);
        draw_set_halign(fa_right);
        draw_text(room_width / 2, 24 * 6 + 48, "Average");
        draw_rectangle(room_width / 2 + 7, 24 * 6 + 47, room_width / 2 + 30, 24 * a + 67, true);
        draw_set_halign(fa_left);
        draw_text(room_width / 2 + 8, 24 * 6 + 48, average);
        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        draw_text_ext(room_width / 2, room_height * 9 / 16, "Comments for the maker: " + user_input, 16, room_width * 3 / 4);
        draw_text(room_width / 2, room_height * 19 / 20, "FINISH");
        draw_set_halign(fa_left);
        draw_set_valign(fa_top);
        draw_rectangle(room_width / 2 - 25, room_height * 19 / 20 - 8, room_width / 2 + 25, room_height * 19 / 20 + 7, true);
    }
}
else
{
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text(room_width / 2, room_height * 1 / 6, "The results are in!");
    for (a = 0; a &lt; gamemax; a += 1)
        draw_text(room_width / 2, room_height * 1 / 4 + a * 24, "Game Number " + string(a + 1) + ": " + string(gameaverage[a + 1] / judgenumber));
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
}
draw_set_color(c_black);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
